// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: tages.proto

package tages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagesClient is the client API for Tages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagesClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (Tages_UploadFileClient, error)
	GetFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetFileResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Tages_DownloadClient, error)
}

type tagesClient struct {
	cc grpc.ClientConnInterface
}

func NewTagesClient(cc grpc.ClientConnInterface) TagesClient {
	return &tagesClient{cc}
}

func (c *tagesClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (Tages_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tages_ServiceDesc.Streams[0], "/Tages/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &tagesUploadFileClient{stream}
	return x, nil
}

type Tages_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type tagesUploadFileClient struct {
	grpc.ClientStream
}

func (x *tagesUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tagesUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagesClient) GetFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetFileResponse, error) {
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, "/Tages/GetFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagesClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Tages_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tages_ServiceDesc.Streams[1], "/Tages/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &tagesDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tages_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type tagesDownloadClient struct {
	grpc.ClientStream
}

func (x *tagesDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TagesServer is the server API for Tages service.
// All implementations must embed UnimplementedTagesServer
// for forward compatibility
type TagesServer interface {
	UploadFile(Tages_UploadFileServer) error
	GetFiles(context.Context, *emptypb.Empty) (*GetFileResponse, error)
	Download(*DownloadRequest, Tages_DownloadServer) error
	mustEmbedUnimplementedTagesServer()
}

// UnimplementedTagesServer must be embedded to have forward compatible implementations.
type UnimplementedTagesServer struct {
}

func (UnimplementedTagesServer) UploadFile(Tages_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedTagesServer) GetFiles(context.Context, *emptypb.Empty) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedTagesServer) Download(*DownloadRequest, Tages_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedTagesServer) mustEmbedUnimplementedTagesServer() {}

// UnsafeTagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagesServer will
// result in compilation errors.
type UnsafeTagesServer interface {
	mustEmbedUnimplementedTagesServer()
}

func RegisterTagesServer(s grpc.ServiceRegistrar, srv TagesServer) {
	s.RegisterService(&Tages_ServiceDesc, srv)
}

func _Tages_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TagesServer).UploadFile(&tagesUploadFileServer{stream})
}

type Tages_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type tagesUploadFileServer struct {
	grpc.ServerStream
}

func (x *tagesUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tagesUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Tages_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagesServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tages/GetFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagesServer).GetFiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tages_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagesServer).Download(m, &tagesDownloadServer{stream})
}

type Tages_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type tagesDownloadServer struct {
	grpc.ServerStream
}

func (x *tagesDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Tages_ServiceDesc is the grpc.ServiceDesc for Tages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Tages",
	HandlerType: (*TagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFiles",
			Handler:    _Tages_GetFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _Tages_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _Tages_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tages.proto",
}
